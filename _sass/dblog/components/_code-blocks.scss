@use "../utilities" as *;
@use "../base" as *;

/**
 * Code formating
 */
.key,
kbd,
code {
  padding: 2px 4px;
  color: var(--tx-1);
  border-radius: $border-radius;
  border: 1px solid var(--bd-1);
  background: var(--bg-2);
}

code.filepath {
  background: inherit;
  border: inherit;
  color: var(--ac-1);
  font-weight: 600;
  padding: 0;
}

pre {
  background: var(--bg-2);
  padding: $spacing-unit;
  overflow-x: auto;

  > code {
    border: 0;
    @include reset-spacing;
  }
}

.key,
kbd {
  padding: 1px 4px;
  border-bottom: 2px solid var(--bg-3);
}

samp {
  background: inherit !important;
  color: var(--ac-1);
}

abbr {
  cursor: help;
}

.tooltip {
  position: absolute;
  background: var(--bg-3);
  color: var(--tx-1);
  padding: 5px 10px;
  border-radius: 3px;
  font-size: 12px;
  opacity: 0;
  transition: opacity 0.2s ease;
  z-index: 2;
  top: -40px; /* Adjust as needed */
  left: -5px;
  transform: translateX(-50%);
  white-space: nowrap;
  pointer-events: none;
}

.tooltip.show {
  opacity: 1;
}

.code-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 3px 5px;

  font-size: 14px;
  font-weight: 600;
  font-family: $font-sans;

  color: var(--tx-1);
  background: var(--bg-3);

  border-radius: calc($border-radius * 2) calc($border-radius * 2) 0 0;

  + .highlight {
    border-radius: 0 0 $border-radius $border-radius;
  }

  .code-header-title {
    flex-grow: 1;
  }

  .code-header-icon {
    margin-right: 10px;
  }

  .copy-clipboard {
    opacity: 0;

    &:hover {
      opacity: 1;
    }

    transition: opacity 0.1s ease;
  }

  .copy-succeed {
    color: var(--green);
  }

  svg {
    color: var(--tx-1);
    width: 20px;
    height: 20px;

    display: inline-block;
    vertical-align: middle;
  }

  button {
    cursor: pointer;
    border: none;
    color: inherit;
    background: inherit;
    position: relative; /* Ensure tooltip is positioned relative to button */
  }
}

div.highlight,
figure.highlight {
  margin: 0;
  @extend %vertical-rhythm;
  // margin-bottom: $spacing-unit;
}

.highlight {
  pre code {
    border: none;
    white-space: nowrap;
  }

  code {
    color: unset;
    background: unset;
  }

  table pre,
  table td {
    @include reset-spacing;
  }

  // Rouge table
  table.rouge-table {
    td.gutter,
    td.rouge-gutter {
      @include reset-spacing;

      &.gl {
        padding-right: $spacing-unit;
      }

      pre.lineno {
        @include reset-spacing;
        text-align: right;
      }
    }

    td.code,
    td.rouge-code {
      pre {
        @include reset-spacing;
      }
    }
  }
}

// Syntax highlighting styles should be adjusted appropriately for every theme
// List of tokens: https://github.com/rouge-ruby/rouge/wiki/List-of-tokens

/* prettier-ignore */
.highlight {
  --syntax-error: var(--red);
  // --syntax-string: #{$base04};
  --syntax-comment: #{$base03};
  .gl    { color: var(--syntax-string); } // Generic.Lineno
  .w     { color: var(--syntax-string); } // Text.Whitespace
  .bp    { color: var(--blue); } // Name.Builtin.Pseudo
  .c     { color: var(--syntax-comment); font-style: italic; } // Comment
  .c1    { color: var(--syntax-comment); font-style: italic; } // Comment.Single
  .cm    { color: var(--syntax-comment); font-style: italic; } // Comment.Multiline
  .cp    { color: var(--syntax-comment); font-style: italic; } // Comment.Preproc
  .cs    { color: var(--syntax-comment); font-style: italic; } // Comment.Special
  .err   { color: var(--syntax-error); } // Error
  .gd    { color: var(--syntax-error); } // Generic.Deleted
  .gi    { color: var(--green); } // Generic.Inserted
  .g     { color: var(--syntax-string); } // Generic
  .ge    { font-style: italic; text-decoration: underline } // Generic.Emph
  .gh    { color: var(--syntax-string); } // Generic.Heading
  .go    { color: var(--syntax-comment); } // Generic.Output
  .gp    { color: var(--brown); } // Generic.Prompt
  .gr    { color: var(--syntax-error); } // Generic.Error
  .gs    { font-weight: bold; } // Generic.Strong
  .gt    { color: var(--syntax-error); } // Generic.Traceback
  .gu    { color: var(--syntax-string); } // Generic.Subheading
  .il    { color: var(--orange); } // Literal.Number.Integer.Long
  .k     { color: var(--violet); font-weight: bold; } // Keyword
  .kc    { color: var(--violet); font-weight: bold; } // Keyword.Constant
  .kd    { color: var(--violet); font-weight: bold; } // Keyword.Declaration
  .kn    { color: var(--violet); font-weight: bold; } // Keyword.Namespace
  .kp    { color: var(--violet); font-weight: bold; } // Keyword.Pseudo
  .kr    { color: var(--violet); font-weight: bold; } // Keyword.Reserved
  .kt    { color: var(--violet); font-weight: bold; } // Keyword.Type
  .l     { color: var(--green); } // Literal
  .ld    { color: var(--green); } // Literal.Date
  .m     { color: var(--orange); } // Literal.Number
  .mb    { color: var(--orange); } // Literal.Number.Bin
  .mf    { color: var(--orange); } // Literal.Number.Float
  .mh    { color: var(--orange); } // Literal.Number.Hex
  .mi    { color: var(--orange); } // Literal.Number.Integer
  .mo    { color: var(--orange); } // Literal.Number.Oct
  .n     { color: var(--syntax-error); } // Name
  .na    { color: var(--yellow); } // Name.Attribute
  .nb    { color: var(--blue); } // Name.Builtin
  .nc    { color: var(--yellow); font-weight: bold; } // Name.Class
  .nd    { color: var(--yellow); } // Name.Decorator
  .ne    { color: var(--syntax-error); font-weight: bold; } // Name.Exception
  .nf    { color: var(--blue); } // Name.Function
  .ni    { color: var(--syntax-error); } // Name.Entity
  .nl    { color: var(--syntax-error); } // Name.Label
  .nn    { color: var(--syntax-error); } // Name.Namespace
  .no    { color: var(--orange); } // Name.Constant
  .nt    { color: var(--violet); } // Name.Tag
  .nv    { color: var(--orange); } // Name.Variable
  .nx    { color: var(--syntax-error); } // Name.Other
  .o     { color: var(--syntax-string); font-weight: bold; } // Operator
  .ow    { color: var(--syntax-string); font-weight: bold; } // Operator.Word
  .p     { color: var(--syntax-string); } // Punctuation
  .py    { color: var(--syntax-error); } // Name.Property
  .s     { color: var(--green); } // Literal.String
  .s1    { color: var(--green); } // Literal.String.Single
  .s2    { color: var(--green); } // Literal.String.Double
  .sb    { color: var(--green); } // Literal.String.Backtick
  .sc    { color: var(--green); } // Literal.String.Char
  .sd    { color: var(--green); } // Literal.String.Doc
  .se    { color: var(--cyan); } // Literal.String.Escape
  .sh    { color: var(--green); } // Literal.String.Heredoc
  .si    { color: var(--green); } // Literal.String.Interpol
  .sr    { color: var(--cyan); } // Literal.String.Regex
  .ss    { color: var(--green); } // Literal.String.Symbol
  .sx    { color: var(--green); } // Literal.String.Other
  .vc    { color: var(--orange); } // Name.Variable.Class
  .vg    { color: var(--orange); } // Name.Variable.Global
  .vi    { color: var(--orange); } // Name.Variable.Instance
  .x     { color: var(--brown); } // Other
}
