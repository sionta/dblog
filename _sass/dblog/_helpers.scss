@use "sass:color";
@use "sass:math";
@use "sass:map";

@mixin css-vars($map, $key, $prefix: "") {
  @if map.get($map, $key) {
    @each $key, $value in map.get($map, $key) {
      --#{$prefix}#{$key}: #{$value};
    }
  } @else {
    @error "Error map.get($map, $key)";
  }
}

@mixin media-query($bp: "md", $vw: "max") {
  $query: "screen";

  @if $bp == "sm" {
    $query: "(#{$vw}-width: 576px)";
  } @else if $bp == "md" {
    $query: "(#{$vw}-width: 768px)";
  } @else if $bp == "lg" {
    $query: "(#{$vw}-width: 1080px)";
  }

  @media #{$query} {
    @content;
  }
}

@mixin bg-translucent($blur: 8px, $alpha: 0.5) {
  background-color: rgba(var(--color-background-rgb), $alpha);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur); // Safari support
}

@function unit-relative($value, $root: "rem") {
  $unit-base: if($root == "rem", 1rem, 1em);
  $unit-name: unit($value);

  @if $unit-name == "px" {
    @return math.div($value, 16px) * $unit-base;
  } @else if $unit-name == "%" {
    @return math.div($value, 100) * $unit-base;
  } @else {
    @return $value;
  }
}

@function rgb-value($color) {
  $red: color.channel($color, "red", $space: rgb);
  $green: color.channel($color, "green", $space: rgb);
  $blue: color.channel($color, "blue", $space: rgb);
  @return #{$red}, #{$green}, #{$blue};
}
